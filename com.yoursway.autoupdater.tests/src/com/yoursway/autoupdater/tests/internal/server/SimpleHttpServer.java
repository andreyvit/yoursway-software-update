package com.yoursway.autoupdater.tests.internal.server;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.InetAddress;import java.net.ServerSocket;import java.net.Socket;public class SimpleHttpServer extends Thread {        public enum Method {                UNKNOWN,        GET,        HEAD            }        public SimpleHttpServer(int port, SimpleServlet to_send_message_to) {        this.servlet = to_send_message_to;        this.port = port;        this.start();    }        private void log(String s2) {        System.out.println(s2);        servlet.log(s2);    }        private SimpleServlet servlet;    private int port;        public void run() {        ServerSocket serversocket = null;        log("The simple httpserver v. 0000000000\nCoded by Jon Berg"                + "<jon.berg[on server]turtlemeat.com>\n\n");        try {            log("Trying to bind to localhost on port " + Integer.toString(port) + "...");            serversocket = new ServerSocket(port);        } catch (Exception e) { //catch any errors and print errors to gui            log("\nFatal Error:" + e.getMessage());            return;        }        log("OK!\n");        while (true) {            log("\nReady, Waiting for requests...\n");            try {                Socket connectionsocket = serversocket.accept();                InetAddress client = connectionsocket.getInetAddress();                log(client.getHostName() + " connected to server.\n");                BufferedReader input = new BufferedReader(new InputStreamReader(connectionsocket                        .getInputStream()));                DataOutputStream output = new DataOutputStream(connectionsocket.getOutputStream());                httpHandler(input, output);            } catch (Exception e) {                log("\nError:" + e.getMessage());            }                    }    }        private void httpHandler(BufferedReader input, DataOutputStream output) {        Method method = Method.UNKNOWN;        String http = new String();        String path = new String();        String file = new String();        String user_agent = new String(); //what user_agent        try {            String tmp = input.readLine(); //read from the stream            String tmp2 = new String(tmp);            tmp.toUpperCase(); //convert it to uppercase            if (tmp.startsWith("GET")) {                method = Method.GET;            } else if (tmp.startsWith("HEAD")) {                method = Method.HEAD;            }                        if (method == Method.UNKNOWN) {                try {                    output.writeBytes(constructHttpHeader(501, 0));                    output.close();                    return;                } catch (Exception e3) {                    log("error:" + e3.getMessage());                }            }                        //tmp contains "GET /index.html HTTP/1.0 ......."            //find first space            //find next space            //copy whats between minus slash, then you get "index.html"            //it's a bit of dirty code, but bear with me...            int start = 0;            int end = 0;            for (int a = 0; a < tmp2.length(); a++) {                if (tmp2.charAt(a) == ' ' && start != 0) {                    end = a;                    break;                }                if (tmp2.charAt(a) == ' ' && start == 0) {                    start = a;                }            }            path = tmp2.substring(start + 2, end);        } catch (Exception e) {            log("errorr" + e.getMessage());        }                log("\nClient requested:" + new File(path).getAbsolutePath() + "\n");        InputStream requestedfile = null;                try {            requestedfile = servlet.openFile(path);            if (requestedfile == null)                throw new FileNotFoundException(path);        } catch (Exception e) {            try {                output.writeBytes(constructHttpHeader(404, 0));                output.close();            } catch (Exception e2) {            }            log("error" + e.getMessage());        }                try {            output.writeBytes(constructHttpHeader(200, 0));                        if (method == Method.GET) {                while (true) {                    int b = requestedfile.read();                    if (b == -1)                        break;                    output.write(b);                }            }                        output.close();            requestedfile.close();        }        catch (Exception e) {        }            }        private String constructHttpHeader(int return_code, int file_type) {        String s = "HTTP/1.0 ";        switch (return_code) {        case 200:            s = s + "200 OK";            break;        case 400:            s = s + "400 Bad Request";            break;        case 403:            s = s + "403 Forbidden";            break;        case 404:            s = s + "404 Not Found";            break;        case 500:            s = s + "500 Internal Server Error";            break;        case 501:            s = s + "501 Not Implemented";            break;        }                s = s + "\r\n";        s = s + "Connection: close\r\n";        s = s + "Server: SimpleHTTPtutorial v0\r\n";                switch (file_type) {        case 0:            s = s + "Content-Type: text/plain\r\n";            break;        case 1:            s = s + "Content-Type: image/jpeg\r\n";            break;        case 2:            s = s + "Content-Type: image/gif\r\n";            break;        case 3:            s = s + "Content-Type: application/x-zip-compressed\r\n";            break;        default:            s = s + "Content-Type: text/html\r\n";            break;        }                s = s + "\r\n";        return s;    }    }